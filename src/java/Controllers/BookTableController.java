package Controllers;

import DAO.MenuDAO;
import DAO.ReservationDAO;
import DAO.CustomerDAO;
import Models.MenuItem;
import Models.Reservation;
import Models.User;

import jakarta.servlet.*;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import java.io.IOException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;

@WebServlet("/book-table")
public class BookTableController extends HttpServlet {
    private final ReservationDAO reservationDAO = new ReservationDAO();
    private final MenuDAO menuDAO = new MenuDAO();
    private final CustomerDAO customerDAO = new CustomerDAO();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        HttpSession session = req.getSession(false);
        User user = (session != null) ? (User) session.getAttribute("user") : null;

        if (user == null) {
            req.setAttribute("error", "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ƒë·∫∑t b√†n.");
            req.getRequestDispatcher("/Views/auth/login.jsp").forward(req, resp);
            return;
        }

        List<MenuItem> menuList = menuDAO.getAllMenuItems();
        req.setAttribute("menuList", menuList);
        req.getRequestDispatcher("/Views/reservation/book-table.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        req.setCharacterEncoding("UTF-8");
        HttpSession session = req.getSession(false);
        User user = (session != null) ? (User) session.getAttribute("user") : null;

        if (user == null) {
            req.setAttribute("error", "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ƒë·∫∑t b√†n.");
            req.getRequestDispatcher("/Views/auth/login.jsp").forward(req, resp);
            return;
        }

        String date = req.getParameter("date");
        String time = req.getParameter("time");
        String duration = req.getParameter("duration");
        String guestCount = req.getParameter("guestCount");
        String note = req.getParameter("note");
        String orderType = req.getParameter("orderType");

        try {
            // üîπ Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p h·ª£p l·ªá
            if (date == null || time == null || duration == null || guestCount == null) {
                req.setAttribute("error", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·∫∑t b√†n.");
                reloadForm(req, resp);
                return;
            }

            // üîπ Ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t b√†n trong qu√° kh·ª©
            LocalDate bookingDate = LocalDate.parse(date);
            LocalDate today = LocalDate.now();
            if (bookingDate.isBefore(today)) {
                req.setAttribute("error", "‚õî Kh√¥ng th·ªÉ ƒë·∫∑t b√†n v√†o ng√†y trong qu√° kh·ª©. Vui l√≤ng ch·ªçn ng√†y t·ª´ h√¥m nay tr·ªü ƒëi.");
                reloadForm(req, resp);
                return;
            }

            // üîπ Gi·ªù m·ªü c·ª≠a - ƒë√≥ng c·ª≠a
            LocalTime bookingTime = LocalTime.parse(time);
            LocalTime openTime = LocalTime.of(8, 0);
            LocalTime closeTime = LocalTime.of(22, 0);
            int durationMinutes = Integer.parseInt(duration);

            // üîπ Ki·ªÉm tra gi·ªù h·ª£p l·ªá
            if (bookingTime.isBefore(openTime) || bookingTime.isAfter(closeTime)) {
                req.setAttribute("error", "‚è∞ Gi·ªù ƒë·∫∑t b√†n ph·∫£i n·∫±m trong khung ho·∫°t ƒë·ªông (08:00 - 22:00).");
                reloadForm(req, resp);
                return;
            }

            // üîπ T√≠nh th·ªùi ƒëi·ªÉm k·∫øt th√∫c
            LocalTime endTime = bookingTime.plusMinutes(durationMinutes);
            if (endTime.isAfter(closeTime)) {
                req.setAttribute("error", "‚õî Kh√¥ng cho ph√©p ƒë·∫∑t b√†n n·∫øu th·ªùi ƒëi·ªÉm k·∫øt th√∫c v∆∞·ª£t qu√° gi·ªù ƒë√≥ng c·ª≠a (22:00).");
                reloadForm(req, resp);
                return;
            }

            if (durationMinutes <= 0) {
                req.setAttribute("error", "‚ö†Ô∏è Th·ªùi l∆∞·ª£ng ƒë·∫∑t b√†n ph·∫£i l·ªõn h∆°n 0 ph√∫t.");
                reloadForm(req, resp);
                return;
            }

            // üîπ L·∫•y customer_id theo user_id
            String customerId = customerDAO.getCustomerIdByUserId(user.getId());
            if (customerId == null) {
                req.setAttribute("error", "Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng.");
                reloadForm(req, resp);
                return;
            }

            // üîπ Ki·ªÉm tra tr√πng th·ªùi gian ƒë·∫∑t b√†n
            if (reservationDAO.hasDuplicateBooking(customerId, date, bookingTime, endTime)) {
                req.setAttribute("error", "‚ö†Ô∏è B·∫°n ƒë√£ c√≥ m·ªôt ƒë·∫∑t b√†n tr√πng th·ªùi gian trong ng√†y n√†y. Vui l√≤ng ch·ªçn khung gi·ªù kh√°c.");
                reloadForm(req, resp);
                return;
            }

            // üîπ N·∫øu ƒë·∫∑t m√≥n tr∆∞·ªõc
            String[] selectedMenuItems = req.getParameterValues("menuItem");
            if (selectedMenuItems != null && selectedMenuItems.length > 0) {
                StringBuilder orderedMenu = new StringBuilder("ƒê·∫∑t tr∆∞·ªõc c√°c m√≥n: ");
                for (String menuId : selectedMenuItems) {
                    String qty = req.getParameter("qty_" + menuId);
                    orderedMenu.append("[M√≥n #").append(menuId)
                            .append(": SL ").append(qty).append("] ");
                }
                note = (note == null ? "" : note) + " | " + orderedMenu;
            }

            // üîπ L∆∞u ƒë·∫∑t b√†n
            Reservation r = new Reservation();
            r.setCustomerId(customerId);
            r.setReservedAt(Timestamp.valueOf(date + " " + time + ":00"));
            r.setReservedDuration(durationMinutes);
            r.setGuestCount(Integer.parseInt(guestCount));
            r.setStatus("PENDING");
            r.setNote(orderType + " - " + note);

            boolean success = reservationDAO.addReservation(r);

            req.setAttribute(success ? "success" : "error",
                    success ? "üéâ ƒê·∫∑t b√†n th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá x√°c nh·∫≠n s·ªõm."
                            : "‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t b√†n, vui l√≤ng th·ª≠ l·∫°i!");

            reloadForm(req, resp);

        } catch (Exception e) {
            e.printStackTrace();
            req.setAttribute("error", "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage());
            reloadForm(req, resp);
        }
    }

    private void reloadForm(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        List<MenuItem> menuList = menuDAO.getAllMenuItems();
        req.setAttribute("menuList", menuList);
        req.getRequestDispatcher("/Views/reservation/book-table.jsp").forward(req, resp);
    }
}
